https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/lecture-videos/lecture-8-hashing-with-chaining/

Lecture 8

Hash Tables can be used to implement dictionaries along with other data structures like red-black trees.

Hash
Reduce universe, U, of all keys (integers) down to a reasonable size m for table.
Key space -> Hash function -> Array of 1..m
Any time there are two ks, ki and kj, result in same

In the worst case hashes are O(n), but very very unlikely.
This is because if your hashing function returned

Simple Uniform Hashing (False assumption, though convenient for analysis)
Expected length of a slot is n/m where n is the number of keys and m is the
number of slots
This is called alpha, aka load factor.

* Hash Functions *

1 Division method (poor method)
  h(k) = k mod m

2 Multiplication method
  h(k) = [(a*k) mod 2^w] >> (w-r)

3 Universal hashing
  h(k) = [(ak + b) mod p] mod m,
       where p is a prime number > |U|
       a and b are random numbers from 0..p-1

3 is the best. For worst case keys, k1 and k2, the Pr(h(k1) = h(k2)) = 1/m. For simplicity,
I'll use 1 in the implementation of the Hash Table.
  

